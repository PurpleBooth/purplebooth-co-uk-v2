# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

env:
  NODE_VERSION: 16.x
  NETLIFY_SITE_ID: 48139038-b4f3-4992-b6a9-9ee5f75fae5b
  NETLIFY_AUTH_TOKEN: fake

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      name: Checkout repository
      with:
        fetch-depth: 0
        lfs: true
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm
    - run: npm install
      name: Install dependencies
    - name: Pack assets
      run: tar -cf assets.tar .
    - uses: actions/upload-artifact@v3
      name: Save assets
      with:
        name: installed-artifact
        path: assets.tar
        retention-days: 1

  build:
    name: Create production build
    needs:
    - install
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: installed-artifact
        path: .
    - name: Unpack assets
      run: tar -xf assets.tar .
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - run: npm run build
      name: Build site
      env:
        NODE_ENV: production
    - name: Pack built assets
      run: tar -uf assets.tar .

    - uses: actions/upload-artifact@v3
      name: Save built assets
      with:
        name: built-artifact
        path: assets.tar
        retention-days: 1

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs:
    - install
    steps:
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: installed-artifact
        path: .
    - run: tar -xf assets.tar
      name: Unpack assets
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - run: npm run lint
  style:
    name: Check coding style
    runs-on: ubuntu-latest
    needs:
    - install
    steps:
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: installed-artifact
        path: .
    - run: tar -xf assets.tar
      name: Unpack assets
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - run: npx prettier -c services/ components/ pages/ styles/ tests/
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs:
    - install
    steps:
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: installed-artifact
        path: .
    - run: tar -xf assets.tar
      name: Unpack assets
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - run: npm run test

  e2e:
    name: Run end to end tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs:
    - install
    steps:
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: installed-artifact
        path: .
    - run: tar -xf assets.tar
      name: Unpack assets
    - uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install Playwright
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results
        path: test-results/

  deploy-draft:
    name: Deploy draft site
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: draft
      url: ${{ steps.deploy.outputs.url }}
    needs:
    - test
    - style
    - e2e
    - lint
    - build
    steps:
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: built-artifact
        path: .
    - run: tar -xf assets.tar
      name: Unpack assets
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Deploy to netlify
      id: deploy
      run: echo "::set-output name=url::$(npx -p netlify-cli netlify deploy --json
        --build | jq -r .deploy_url)"
      env:
        NODE_ENV: production
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    - name: Install Playwright
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
      env:
        BASE_URL: ${{ steps.deploy.outputs.url }}
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results
        path: test-results/

  uplift-release:
    name: Release
    if: github.ref == 'refs/heads/main'
    needs:
    - deploy-draft
    runs-on: ubuntu-latest
    steps:
    - uses: gembaadvantage/uplift-action@v2
      name: Install uplift
      with:
        install-only: true
        args: version
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: installed-artifact
        path: .
    - name: Unpack assets
      run: tar -xf assets.tar .
    - name: Setup authentication
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --unset-all http.https://github.com/.extraHeader
        git config credential.helper '!f() { echo "username=x-access-token"; echo "password=$GITHUB_TOKEN"; };f'
        git config user.name "$(git log -1 --pretty=format:"%an")"
        git config user.email "$(git log -1 --pretty=format:'%ae')"
    - run: |
        uplift release --no-push
        npm install
        git add package-lock.json
        git commit --amend --no-edit || true
        git push
        git push --tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: uplift changelog --diff-only --silent > contents.md
      name: Generate changelog
    - run: echo "::set-output name=version::$(git tag | sort --version-sort | tail -1)"
      name: Set next version
      id: next
    - uses: ncipollo/release-action@v1
      name: Update release changlog
      with:
        bodyFile: "contents.md"
        allowUpdates: true
        tag: ${{ steps.next.outputs.version }}
        token: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: Deploy site
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://purplebooth.co.uk
    concurrency:
      group: deploy/prod
    needs:
    - uplift-release
    steps:
    - uses: actions/download-artifact@v3
      name: Download assets
      with:
        name: built-artifact
        path: .
    - run: tar -xf assets.tar
      name: Unpack assets
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Deploy to netlify
      run: npx -p netlify-cli netlify deploy --prod --build
      env:
        NODE_ENV: production
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Install Playwright
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
      env:
        BASE_URL: https://purplebooth.co.uk
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results
        path: test-results/
